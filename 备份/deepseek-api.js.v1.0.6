/**
 * DeepSeek API 接口
 * 用于处理与DeepSeek AI的通信
 * 版本: 1.0.0
 */

class DeepSeekAPI {
    constructor(apiKey = null) {
        // 预设API密钥，如果没有提供则使用默认值
        this.apiKey = apiKey || 'sk-e14ca5937bec444da5bd8bf0aa59f4fe';
        
        // API配置
        this.baseURL = 'https://api.deepseek.ai';
        this.apiVersion = 'v1';
        this.apiEndpoint = '/chat/completions';
        
        // 模型配置
        this.availableModels = {
            default: 'deepseek-llm-67b-chat',
            alternatives: [
                'deepseek-chat',
                'deepseek-coder',
                'deepseek-coder-instruct-6.7b',
                'deepseek-coder-6.7b-instruct',
                'deepseek-llm-7b-chat'
            ]
        };
        
        // 默认使用第一个模型
        this.currentModel = this.availableModels.default;
        
        // 其他设置
        this.systemPrompt = this.getDefaultSystemPrompt();
        this.conversationHistory = [];
        this.isThinking = false;
        
        // 模拟模式设置 - 开发时可以开启，生产环境必须关闭
        this.simulationMode = false;
        
        // 保存默认API密钥到本地存储
        if (!localStorage.getItem('deepseek_api_key')) {
            localStorage.setItem('deepseek_api_key', this.apiKey);
        }
        
        // 从本地存储加载模拟模式设置
        const savedSimMode = localStorage.getItem('deepseek_simulation_mode');
        if (savedSimMode !== null) {
            this.simulationMode = savedSimMode === 'true';
        }
        
        console.log(`DeepSeek API 初始化完成，模拟模式: ${this.simulationMode ? '开启' : '关闭'}`);
    }

    /**
     * 设置API密钥
     * @param {string} apiKey - DeepSeek API密钥
     */
    setApiKey(apiKey) {
        this.apiKey = apiKey;
        // 保存到本地存储，方便下次使用
        localStorage.setItem('deepseek_api_key', apiKey);
        return this;
    }

    /**
     * 获取API密钥
     * @returns {string|null} API密钥
     */
    getApiKey() {
        // 如果内存中没有，尝试从本地存储获取
        if (!this.apiKey) {
            this.apiKey = localStorage.getItem('deepseek_api_key');
        }
        return this.apiKey;
    }

    /**
     * 设置使用的模型
     * @param {string} model - 模型名称
     */
    setModel(model) {
        this.model = model;
        return this;
    }

    /**
     * 设置系统提示词
     * @param {string} prompt - 系统提示词
     */
    setSystemPrompt(prompt) {
        this.systemPrompt = prompt;
        return this;
    }

    /**
     * 获取默认的系统提示词
     * @returns {string} 默认系统提示词
     */
    getDefaultSystemPrompt() {
        return `你是一个个人工作助手AI，帮助用户管理他们的项目、需求和任务。
你可以回答关于项目进度、任务状态、团队成员工作分配等问题。
当用户询问特定项目、需求或任务时，你应该提供详细信息。
如果用户询问"我有哪些未完成的任务"，你应该列出所有未完成的任务。
如果用户询问"项目X的进度如何"，你应该提供该项目的当前进度和状态。
如果用户询问"谁负责任务Y"，你应该告诉用户负责该任务的团队成员。
请使用简洁、专业的语言回答问题，并在适当的时候提供可视化数据。`;
    }

    /**
     * 发送消息到DeepSeek API
     * @param {string} message - 用户消息
     * @param {function} onThinking - 思考状态回调
     * @param {function} onResponse - 响应回调
     * @param {function} onError - 错误回调
     */
    async sendMessage(message, onThinking = null, onResponse = null, onError = null) {
        // 更新思考状态
        this.isThinking = true;
        if (onThinking) onThinking(true);
        
        // 添加用户消息到历史
        this.conversationHistory.push({
            role: 'user',
            content: message
        });
        
        console.log('发送消息到DeepSeek API:', message);
        console.log('当前模拟模式状态:', this.simulationMode ? '开启' : '关闭');
        
        try {
            // 如果在模拟模式下，使用模拟数据
            if (this.simulationMode) {
                console.log('使用模拟DeepSeek响应');
                await this.simulateApiResponse(message, onResponse);
                return;
            }
            
            // 否则使用真实API
            console.log('使用真实DeepSeek API');
            
            // 准备请求数据
            const requestData = {
                model: this.currentModel,
                messages: [
                    {
                        role: 'system',
                        content: this.systemPrompt
                    },
                    ...this.conversationHistory
                ],
                temperature: 0.7,
                max_tokens: 2000
            };
            
            console.log('请求数据:', JSON.stringify(requestData, null, 2));
            
            // 构建API URL
            const apiUrl = `${this.baseURL}/${this.apiVersion}${this.apiEndpoint}`;
            console.log('请求URL:', apiUrl);
            
            try {
                // 发送API请求
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.apiKey}`
                    },
                    body: JSON.stringify(requestData)
                });
                
                // 检查响应状态
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`API响应错误 (${response.status})`, errorText);
                    
                    // 如果是模型错误，尝试备用模型
                    if (response.status === 404 || errorText.includes('model')) {
                        // 尝试备用模型
                        return await this.retryWithAlternativeModel(message, onThinking, onResponse, onError);
                    }
                    
                    throw new Error(`API响应错误 (${response.status}): ${errorText}`);
                }
                
                // 解析响应
                const data = await response.json();
                console.log('DeepSeek API响应:', data);
                
                // 处理有效响应
                if (data && data.choices && data.choices.length > 0) {
                    const aiResponse = data.choices[0].message.content;
                    
                    // 添加AI回复到历史
                    this.conversationHistory.push({
                        role: 'assistant',
                        content: aiResponse
                    });
                    
                    // 调用响应回调
                    if (onResponse) onResponse(aiResponse);
                } else {
                    throw new Error('API响应格式不正确');
                }
            } catch (apiError) {
                console.error('DeepSeek API调用失败:', apiError);
                
                // 如果是网络错误，尝试备用模型
                if (apiError.message.includes('Failed to fetch') || apiError.message.includes('Network')) {
                    // 尝试备用模型
                    return await this.retryWithAlternativeModel(message, onThinking, onResponse, onError);
                }
                
                // 返回错误信息
                if (onError) onError(`DeepSeek API调用失败: ${apiError.message}`);
                
                // 在生产环境下如果API调用失败，则切换到模拟模式
                console.log('切换到模拟模式以提供应急响应');
                this.simulationMode = true;
                localStorage.setItem('deepseek_simulation_mode', 'true');
                await this.simulateApiResponse(message, onResponse);
            }
        } catch (error) {
            console.error('DeepSeek API错误:', error);
            if (onError) onError(`API请求失败: ${error.message}`);
        } finally {
            // 更新思考状态
            this.isThinking = false;
            if (onThinking) onThinking(false);
        }
    }
    
    /**
     * 使用备用模型重试
     */
    async retryWithAlternativeModel(message, onThinking, onResponse, onError) {
        console.log('尝试使用备用模型重试...');
        
        // 尝试每个备用模型
        for (const model of this.availableModels.alternatives) {
            if (model === this.currentModel) continue; // 跳过当前模型
            
            console.log(`尝试模型: ${model}`);
            this.currentModel = model;
            
            try {
                // 重新调用sendMessage，但不传递回调以避免重复回调
                await this.sendMessage(message, onThinking, onResponse, null);
                console.log(`模型 ${model} 成功！`);
                return; // 成功则返回
            } catch (retryError) {
                console.error(`模型 ${model} 失败:`, retryError);
                // 继续尝试下一个模型
            }
        }
        
        // 所有模型都失败，返回错误
        console.log('所有模型都失败，切换到模拟模式');
        this.simulationMode = true;
        localStorage.setItem('deepseek_simulation_mode', 'true');
        
        // 使用模拟数据
        await this.simulateApiResponse(message, onResponse);
        
        if (onError) onError('所有DeepSeek模型调用失败，已切换到模拟模式');
    }

    /**
     * 模拟API响应（开发阶段使用）
     * @param {string} message - 用户消息
     * @param {function} onResponse - 响应回调
     */
    async simulateApiResponse(message, onResponse) {
        // 模拟网络延迟
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        // 模拟AI回复
        let aiResponse = '';
        
        // 根据用户消息生成模拟回复
        if (message.includes('未完成') || message.includes('待办')) {
            aiResponse = `您目前有以下未完成的任务：
1. 【高优先级】UI设计评审 - 截止时间：今天18:00
2. 【中优先级】前端框架选型 - 截止时间：明天10:00
3. 【中优先级】需求文档定稿 - 截止时间：后天15:00
4. 【低优先级】团队周会准备 - 截止时间：周五14:00

您还有2个项目的5个需求尚未完成。需要我列出详细信息吗？`;
        } 
        else if (message.includes('项目') && (message.includes('进度') || message.includes('进展'))) {
            aiResponse = `工作助手项目当前进度为65%。

已完成的里程碑：
✅ 需求分析
✅ 原型设计
✅ 前端框架搭建

进行中的任务：
🔄 DeepSeek API集成 (80%)
🔄 数据模型设计 (50%)
🔄 仪表盘开发 (30%)

下一步计划：
📌 完成DeepSeek集成
📌 实现本地数据存储
📌 开发项目管理模块

项目预计在6月15日前完成第一个可用版本。`;
        }
        else if (message.includes('负责') || message.includes('谁')) {
            aiResponse = `当前任务负责人分配如下：

1. DeepSeek API集成 - 负责人：张三
2. 数据模型设计 - 负责人：李四
3. 前端界面开发 - 负责人：王五
4. 测试与部署 - 负责人：赵六

张三目前负责的任务最多，共有3个进行中的任务。
李四的工作负载最低，可以考虑分配新任务给他。`;
        }
        else if (message.includes('截止') || message.includes('日期')) {
            aiResponse = `近期截止的重要事项：

今天 (5月30日)：
- UI设计评审 (18:00)
- 客户需求确认 (22:00)

明天 (5月31日)：
- 前端框架选型 (10:00)
- 周报提交 (18:00)

后天 (6月1日)：
- 需求文档定稿 (15:00)

下周：
- 项目启动会 (6月3日 10:00)
- 第一轮测试 (6月5日 全天)`;
        }
        else {
            aiResponse = `您好，我是您的工作助手。我可以帮您：

1. 查询项目、需求和任务的状态
2. 了解团队成员的工作分配
3. 查看截止日期和重要事项
4. 获取项目进度报告

请告诉我您需要了解什么信息？`;
        }
        
        // 添加AI回复到历史
        this.conversationHistory.push({
            role: 'assistant',
            content: aiResponse
        });
        
        if (onResponse) onResponse(aiResponse);
    }

    /**
     * 清除对话历史
     */
    clearHistory() {
        this.conversationHistory = [];
        return this;
    }

    /**
     * 获取对话历史
     * @returns {Array} 对话历史
     */
    getHistory() {
        return this.conversationHistory;
    }

    /**
     * 保存对话历史到本地存储
     */
    saveHistory() {
        localStorage.setItem('deepseek_conversation', JSON.stringify(this.conversationHistory));
        return this;
    }

    /**
     * 从本地存储加载对话历史
     */
    loadHistory() {
        const saved = localStorage.getItem('deepseek_conversation');
        if (saved) {
            try {
                this.conversationHistory = JSON.parse(saved);
            } catch (e) {
                console.error('加载对话历史失败:', e);
                this.conversationHistory = [];
            }
        }
        return this;
    }
}

// 导出DeepSeekAPI类
window.DeepSeekAPI = DeepSeekAPI;
